Bricks: @<Bricks.cfg>

# overridden in $Setup / Hopper.cfg only, to simplify testing experiments
MMT_VARIANT: $Setup.MMT_VARIANTS.real

MMTBaseline: @"baseline.cfg"

Experiment: {
  extends: $MMTBaseline.Experiment

  DESCRIPTION: """
    Baseline plain Moses: phrase-based model with lexicalized reordering.
    Addition: Reordering oracle.
  """ + $corporaDescription

  input: {
    bitextSrc: $corpus + $sourceLang
    bitextTrg: $corpus + $targetLang
  }

  # language pair
  sourceLang: en
  targetLang: de

  # variant: small|real
  corpus: $MMT_CORPUS_DIR + "/" + $variant + "/" + "europarl-v7.raw/europarl-v7.de-en."

  parts: {
    # inherit all parts, except for the overrides below.
    extends: $MMTBaseline.Experiment.parts

    # jointly align train and test sets (we will use word alignment of test set)
    # this is methodologically harmless because the small amount of data in the test set will not offset alignment quality.
    #
    JointWordAligner0: {
      extends: $Bricks.Giza.JointWordAligner

      input:  {
        #sources: [ $_._.input.trainSrc, $_._.input.testSrc ]
        #targets: [ $_._.input.trainTrg, $_._.input.testTrg ]

        sources: [ $BitextPrepareSplit0.output.trainSrc, $BitextPrepareSplit0.output.devSrc, $BitextPrepareSplit0.output.testSrc ]
        targets: [ $BitextPrepareSplit0.output.trainTrg, $BitextPrepareSplit0.output.devRef, $BitextPrepareSplit0.output.testRef ]
      }
      # output: { alignments: [] }
    }

    # overrides $MMTBaseline.Experiment.parts.WordAligner0
    WordAligner0: {
      input:  { alignment: $JointWordAligner0.output.alignments[0] }  # use only the train part
      output: { alignment }
      template: """
        ln -sf ../input/alignment output/alignment
      """
    }


    BitextPrepareSplit0: {
      extends: $Bricks.Corpus.BitextPrepareSplit
      input:  {
        bitextSrc: $_._.input.bitextSrc
        bitextTrg: $_._.input.bitextTrg
      }
      # output: { devSrc, devRef, testSrc, testRef, trainSrc, trainTrg }
    }
    # overrides $MMTBaseline.Experiment.parts.LimitTrain0
    LimitTrain0: {
      input:  {
        src: $BitextPrepareSplit0.output.trainSrc
        trg: $BitextPrepareSplit0.output.trainTrg
      }
      output: { src, trg }

      template: """
        ln -sf ../input/src output/src
        ln -sf ../input/trg output/trg
      """
    }
    # overrides $MMTBaseline.Experiment.parts.DevSet0
    DevSet0: {
      input:  {
        src: $BitextPrepareSplit0.output.devSrc
        ref: $BitextPrepareSplit0.output.devRef
      }
      output: { devSrc, devRef }

      template: """
        ln -sf ../input/src output/devSrc
        ln -sf ../input/ref output/devRef
      """
    }
    # overrides $MMTBaseline.Experiment.parts.TestSet0
    TestSet0: {
      input:  {
        src: $BitextPrepareSplit0.output.testSrc
        ref: $BitextPrepareSplit0.output.testRef
      }
      output: { testSrc, testRef }

      template: """
        ln -sf ../input/src output/testSrc
        ln -sf ../input/ref output/testRef
      """
    }


    # overrides $MMTBaseline.Experiment.parts.TestMosesIni0
    TestMosesIni0: {
      extends: $Bricks.Moses.MosesIni
      input: {
        languageModels: [ $LanguageModel0.output.languageModel ]
        phraseTables: []
        reorderingTables: []
        binaryPhraseTables: [ $TestTables0.output.binaryPhraseTableDir ]
        binaryReorderingTables: [ $TestTables0.output.binaryReorderingTableDir ]

        alignmentSrcRef: $JointWordAligner0.output.alignments[2]
      }
      # output: { mosesIni }

      # note: probably a shortcoming of paths implementation here. Path is relative to bricks/
      templateFile: "Moses/reordering-oracle.ini.jinja"
    }

    # overrides $MMTBaseline.Experiment.parts.DevMosesIni0
    DevMosesIni0: {
      extends: $Bricks.Moses.MosesIni
      input: {
        languageModels: [ $LanguageModel0.output.languageModel ]
        phraseTables: []
        reorderingTables: []
        binaryPhraseTables: [ $DevTables0.output.binaryPhraseTableDir ]
        binaryReorderingTables: [ $DevTables0.output.binaryReorderingTableDir ]

        alignmentSrcRef: $JointWordAligner0.output.alignments[1]
      }
      # output: { mosesIni }

      templateFile: "Moses/reordering-oracle.ini.jinja"
    }

    BuildMoses0: {
      extends: $Bricks.Moses.BuildMoses

      # output: { mosesBin }

      # speed up the build
      target: "moses"

      srcRepo:  "git@github.com:modernmt/mosesdecoder.git"
      revision: "HEAD"
      branch:   "oracle-reordering"

      # (default values for reference) - some overridden above!
      # srcRepo:   "git@github.com:moses-smt/mosesdecoder.git"
      # revision:  "HEAD"
      # branch:    "master"
      # buildType: "Release"
      # target:    ""
    }

    # overrides $MMTBaseline.Experiment.parts.Mert0
    Mert0: {
      extends: $Bricks.Moses.CustomMert

      input: {
        mosesIni: $DevMosesIni0.output.mosesIni
        devSrc: $DevSet0.output.devSrc
        devRef: $DevSet0.output.devRef
        mosesBin: $BuildMoses0.output.mosesBin
      }
      # output: { tunedMosesIni }
    }

    # overrides $MMTBaseline.Experiment.parts.TestMoses0
    TestMoses0: {
      extends: $Bricks.Moses.CustomDecoder
      input: {
        mosesIni: $WeightedTestMosesIni0.output.weightedMosesIni
        src: $TestSet0.output.testSrc
        mosesBin: $BuildMoses0.output.mosesBin
      }
      # output: { hyp }
    }
  }
}
