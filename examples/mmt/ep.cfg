Bricks: @<Bricks.cfg>

Experiment: {
  extends: $Setup

  DESCRIPTION: """
    Baseline plain Moses: phrase-based model with lexicalized reordering.
  """

  input: {
    trainSrc: $corpus_truecased_train + $sourceLang
    trainTrg: $corpus_truecased_train + $targetLang

    devSrc: $corpus_truecased_dev + $sourceLang
    devRef: $corpus_truecased_dev + $targetLang

    testSrc: $corpus_truecased_test + $sourceLang
    testRef: $corpus_truecased_test + $targetLang
  }
  output: {
    hyp: $parts.TestMoses0.output.hyp
    score: $parts.Bleu0.output.score
  }

  # language pair
  sourceLang: en
  targetLang: it

  corpus: "ep"
  variant: "small"  # small|real

  corpus_data: $MMT_CORPUS_DIR + "/" + $variant + "/" + $corpus
  corpus_truecased_train: $corpus_data + "/train.clean."
  corpus_truecased_dev: $corpus_data + "/set1.clean."
  corpus_truecased_test: $corpus_data + "/set2.clean."

  parts: {
    LanguageModel0: {
      extends: $Bricks.LM.LanguageModelEstimator
      input:  { corpus: $_._.input.trainTrg }
      # languageModel: binarized KenLM
      # output: { languageModel }
    }

    WordAligner0: {
      extends: $Bricks.Giza.WordAligner
      input: {
        src: $_._.input.trainSrc
        trg: $_._.input.trainTrg
      }
      # output: { alignment }
    }

    PhraseTable0: {
      extends: $Bricks.Phrase.PhraseTable
      input: {
        src: $_._.input.trainSrc
        trg: $_._.input.trainTrg
        alignment: $WordAligner0.output.alignment
      }
      # phraseTable is gzipped
      # output: { phraseTable, reorderingTable }

      reordering: {
        # see http://www.statmt.org/moses/?n=FactoredTraining.BuildReorderingModel
        extends: $Bricks.Phrase.PhraseTable.reordering

        # override orientation
        orient: "mslr"

        # bidirectional: *2, each orientation: *4 feature scores
        numFeatures: 2 * 4
      }
    }

    DevTables0: {
      extends: $Bricks.Phrase.Post.FilterBinarizeTables
      # table, filteredPhraseTable, filteredReorderingTable are gzipped
      input: {
        phraseTable: $PhraseTable0.output.phraseTable
        reorderingTable: $PhraseTable0.output.reorderingTable
        src: $_._.input.devSrc
      }
      # output: { binaryPhraseTableDir, binaryReorderingTableDir }

      # for various phrase table config (e.g. numFeatures) used in moses.ini
      phraseTableConfig: $PhraseTable0.phraseTableConfig
    }

    TestTables0: {
      extends: $Bricks.Phrase.Post.FilterBinarizeTables
      # table, filteredPhraseTable, filteredReorderingTable are gzipped
      input: {
        phraseTable: $PhraseTable0.output.phraseTable
        reorderingTable: $PhraseTable0.output.reorderingTable
        src: $_._.input.testSrc
      }
      # output: { binaryPhraseTableDir, binaryReorderingTableDir }

      # for various phrase table config (e.g. numFeatures) used in moses.ini
      phraseTableConfig: $PhraseTable0.phraseTableConfig
    }

    TestMosesIni0: {
      extends: $Bricks.Moses.MosesIni
      input: {
        languageModels: [ $LanguageModel0.output.languageModel ]
        phraseTables: []
        reorderingTables: []
        binaryPhraseTables: [ $TestTables0.output.binaryPhraseTableDir ]
        binaryReorderingTables: [ $TestTables0.output.binaryReorderingTableDir ]
      }
      # output: { mosesIni }
    }

    WeightedTestMosesIni0: {
      extends: $Bricks.Moses.WeightedMosesIni
      input: {
        generatedMosesIni: $TestMosesIni0.output.mosesIni
        tunedMosesIni: $Mert0.output.tunedMosesIni
      }
      # output: { weightedMosesIni }
    }

    DevMosesIni0: {
      extends: $Bricks.Moses.MosesIni
      input: {
        languageModels: [ $LanguageModel0.output.languageModel ]
        phraseTables: []
        reorderingTables: []
        binaryPhraseTables: [ $DevTables0.output.binaryPhraseTableDir ]
        binaryReorderingTables: [ $DevTables0.output.binaryReorderingTableDir ]
      }
      # output: { mosesIni }
    }

    Mert0: {
      extends: $Bricks.Moses.Mert

      input: {
        mosesIni: $DevMosesIni0.output.mosesIni
        devSrc: $_._.input.devSrc
        devRef: $_._.input.devRef
      }
      # output: { tunedMosesIni }
    }

    TestMoses0: {
      extends: $Bricks.Moses.Decoder
      input: {
        mosesIni: $WeightedTestMosesIni0.output.weightedMosesIni
        src: $_._.input.testSrc
      }
      # output: { hyp }
    }

    Bleu0: {
      extends: $Bricks.Eval.Bleu
      input: { hyp: $TestMoses0.output.hyp, ref: $_._.input.testRef }
      # output: { score }
    }
  }
}
