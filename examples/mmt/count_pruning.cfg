Bricks: @<Bricks.cfg>

MMTBaseline: @"baseline.cfg"

SinglePruningExperiment: {
  extends: $MMTBaseline.Experiment

  DESCRIPTION: """
    Count-based pruning.

    Moses with cube pruning decoder.

  """ + $corporaDescription

  # output: {
  #   hyp: $parts.TestMoses0.output.hyp
  #   score: $parts.Bleu0.output.score
  #   summary: $parts.Summary0.output.summary
  # }

  parts: {
    extends: $MMTBaseline.Experiment.parts

    # override
    PhraseTable0: {
      extends: $MMTBaseline.Experiment.parts.PhraseTable0

      # from SinglePruningExperiment
      minCount: $_.countPruningMinCount
    }
  }

  # joint count N(f,e) threshold - drop phrase pairs occurring less often
  countPruningMinCount: 0
}

Experiment: {
  extends: $MMTBaseline.Experiment  # for $corpus_truecased_train etc ...

  DESCRIPTION: """
    Sweep through various count-based pruning thresholds.

    Moses with cube pruning decoder.

  """ + $corporaDescription

  input:  {
    # TODO: fix ze bug - same as PhraseTable reordering: $ProvidesPhraseTableConfig.reordering
    #extends: $SinglePruningExperiment.input
    #extends: $MMTBaseline.Experiment.input  # TODO: another bug. 'str' object has no attribute 'instantiate' in config.py:471

    trainSrc: $corpus_truecased_train + $sourceLang
    trainTrg: $corpus_truecased_train + $targetLang

    devSrc: $corpus_truecased_dev + $sourceLang
    devRef: $corpus_truecased_dev + $targetLang

    testSrc: $corpus_truecased_test + $sourceLang
    testRef: $corpus_truecased_test + $targetLang
  }
  output: {
    report: $parts.Aggregate0.output.report
  }

  # note: bash-based experiment markup could avoid this weird passing through
  # by using automatic ../ prefixing of paths

  # (but we could also "just" support lazy wiring of bricks to grandparents)
  # (do parents get the inputs automatically? ...)

  countPruningMinCounts: [ 0, 1, 2, 5, 10, 20 ]

  parts: {
    MinCountSweep0: {
      input:  {
        trainSrc: $_._.input.trainSrc
        trainTrg: $_._.input.trainTrg

        devSrc: $_._.input.devSrc
        devRef: $_._.input.devRef

        testSrc: $_._.input.testSrc
        testRef: $_._.input.testRef
      }
      output: {
        # hyps: [ $parts[$i].output.hyp ]
        scores: [ $parts[$i].output.score ]
      }

      # magic loop config pattern (detected by parts: [{}] syntax)
      i: [0..$countPruningMinCounts.length-1]

      parts: [{
        # implicit scalar $i

        extends: $SinglePruningExperiment
        input:  {
          trainSrc: $_._.input.trainSrc
          trainTrg: $_._.input.trainTrg

          devSrc: $_._.input.devSrc
          devRef: $_._.input.devRef

          testSrc: $_._.input.testSrc
          testRef: $_._.input.testRef
        }

        countPruningMinCount: $countPruningMinCounts[$i]
      }]
    }

    Aggregate0: {
      input:  { scores: $MinCountSweep0.output.scores }
      output: { report }

      # from Experiment
      countPruningMinCounts: $_.countPruningMinCounts

      template: """
        rm -f output/report
        {% for minCount in brick.countPruningMinCounts -%}
          echo -n "{{ minCount }} " >> output/report
          gawk -F ' |,' '{print $3}' input/scores/{{ loop.index0 }} >> output/report
        {% endfor %}
      """
    }
  }
}
