# include general Bricks that we will later use below.
Bricks: @<Bricks.cfg>

# Creates the word alignment of a truecased corpus.
# for now also tests PhraseTable.
Experiment: {
  # inherit machine-specific paths, ncpus, ...
  extends: $Bricks.Setups.Hopper

  input:  {
    truecasedSrc: $ibm10k_truecased + $sourceLang
    truecasedTrg: $ibm10k_truecased + $targetLang
  }
  output: {
    alignment: $parts.WordAligner0.output.alignment
    phraseTable: $parts.PhraseTable0.output.phraseTable
    reorderingTable: $parts.PhraseTable0.output.reorderingTable
    mosesIni: $parts.MosesIni0.output.mosesIni

    processedItems: $parts.LoopyBrick.output.processedItems
  }
  
  # language pair
  sourceLang: en
  targetLang: it

  ibm10k_data: "/home/david/mmt/data/training/small/ibm"
  ibm10k_truecased: $ibm10k_data + "/train.clean."
  
  parts: {
    LoopyBrick: {
      input:  { corpora: [ $_._.input.truecasedSrc, $_._.input.truecasedTrg ] }
      # new, special output list syntax:
      output: { processedItems: [ $parts[$i].output.processed ] }

      # an Expression inside a range... yeeha!
      i: [0..$input.corpora.length-1]

      # new, special semantics (parts is a list with one [idiomatic] entry):
      parts: [{
        # in here, we have an implicit loop index $i
        #extends: $Bricks.blabla
        input: { crp: $_._.input.corpora[$i] }
        output: { processed }
      }]
    }

    LanguageModel0: {
      extends: $Bricks.Phrase.LanguageModelEstimator
      input:  { corpus: $_._.input.truecasedTrg }
      # languageModel: binarized KenLM
      # output: { languageModel }
    }

    WordAligner0: {
      extends: $Bricks.Giza.WordAligner
      input: {
        src: $_._.input.truecasedSrc
        trg: $_._.input.truecasedTrg
      }
      # output: { alignment }
    }

    PhraseTable0: {
      extends: $Bricks.Phrase.PhraseTable
      input: {
        src: $_._.input.truecasedSrc
        trg: $_._.input.truecasedTrg
        alignment: $WordAligner0.output.alignment
      }
      # phraseTable is gzipped
      # output: { phraseTable, reorderingTable }

      reordering: {
        # see http://www.statmt.org/moses/?n=FactoredTraining.BuildReorderingModel
        #extends: $Bricks.Phrase.PhraseTable.reordering

        # override orientation. This must then end up in reorderingConfigSpec since Expressions are now lazily resolved.
        orient: "msd"

        # bidirectional: *2, each orientation: *3 feature scores
        numFeatures: 2 * 3
      }
    }

    MosesIni0: {
      extends: $Bricks.Phrase.MosesIni
      input: {
        languageModels: [ $LanguageModel0.output.languageModel ]
        phraseTables: [ $PhraseTable0.output.phraseTable ]
        reorderingTables: [ $PhraseTable0.output.reorderingTable ]
      }
      # output: { mosesIni }
    }
  }
}
