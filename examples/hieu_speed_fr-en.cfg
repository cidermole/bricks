# include general Bricks that we will later use below.
Bricks: @<Bricks.cfg>

# Builds a couple of moses decoders from sources.
Experiment: {
  # inherit machine-specific paths, ncpus, ...
  extends: $Setup

  input: {
    weightedMosesIni: $MODEL_DIR + "/hieu_speed/fr-en/moses.tuned.ini.2.probing.noLexRO"
    testSrc: $MODEL_DIR + "/hieu_speed/fr-en/newstest2011.input.lc.2"
  }
  output: {
    mosesBins: $parts.ForeachMoses0.output.mosesBins
    decodingTimes: $parts.ForeachMoses0.output.decodingTimes
    aggregateResults: $parts.AggregateResults0.output.results
    tabularResults: $parts.TabularResults0.output.results
  }

  nlinesSrc: 600

  mosesSrcRepo: "git@github.com:moses-smt/mosesdecoder.git"
  mosesBranch: "kenlm-prefetch"

  mosesBinMap: {
    original: {
      revision: "a5da1a5"
      name: "original"
    }
    noprefetch: {
      revision: "9806d7a"
      name: "noprefetch"
    }
    prefetch: {
      revision: "77b453a"
      name: "prefetch"
    }
  }

  mosesBinVersions: [
    $mosesBinMap.original
    $mosesBinMap.noprefetch
    $mosesBinMap.prefetch
  ]

  ntestsEach: 10


  parts: {
    # magic loop config pattern (detected by parts: [{}] syntax)
    ForeachMoses0: {
      input:  {
        testSrc: $TestSrc0.output.head
        weightedMosesIni: $_._.input.weightedMosesIni
      }
      output: {
        mosesBins: [$parts[$i].output.mosesBin]
        decodingTimes: [$parts[$i].output.decodingTimes]
      }

      i: [0..$mosesBinVersions.length-1]

      parts: [{
        # implicit scalar $i

        input: {
          testSrc: $_._.input.testSrc
          weightedMosesIni: $_._.input.weightedMosesIni
        }
        output: {
          mosesBin: $parts.BuildMoses0.output.mosesBin
          decodingTimes: $parts.ForeachTestMoses0.output.decodingTimes
        }

        parts: {
          BuildMoses0: {
            extends: $Bricks.Moses.BuildMoses

            # output: { mosesBin }

            # speed up the build
            target: "moses2"

            srcRepo:  $mosesSrcRepo
            revision: $mosesBinVersions[$i].revision
            branch:   $mosesBranch

            # (default values for reference) - some overridden above!
            # srcRepo:   "git@github.com:moses-smt/mosesdecoder.git"
            # revision:  "HEAD"
            # branch:    "master"
            # buildType: "Release"
            # target:    ""
          }

          ForeachTestMoses0: {
            input: {
              mosesIni: $_._.input.weightedMosesIni
              mosesBin: $BuildMoses0.output.mosesBin
              src: $_._.input.testSrc
            }
            output: {
              # $i here is from ForeachTestMoses0, not ForeachMoses0
              hyps: [$parts[$i].output.hyp]
              decodingTimes: [$parts[$i].output.decodingTime]
            }

            i: [0..$ntestsEach-1]

            parts: [{
              # implicit scalar $i

              extends: $Bricks.Moses.CustomProfiledDecoder
              input: {
                mosesIni: $_._.input.mosesIni
                mosesBin: $_._.input.mosesBin
                src: $_._.input.src
              }
              # output: { hyp, decodingTime }

              # prefetching is not yet multi-threaded
              ncpus: 1
            }]
          }
        }
      }]
    }

    TestSrc0: {
      extends: $Bricks.Head

      input: { textFile: $_._.input.testSrc }
      # output: { head }

      nlines: $nlinesSrc
    }

    TabularResults0: {
      input:  { decodingTimes2: $ForeachMoses0.output.decodingTimes }
      output: { results }

      ntests: $ntestsEach
      nversions: $mosesBinVersions.length - 1

      versions: $mosesBinVersions

      template: """
        {
          # header
          {% for version in brick.versions %}
            echo -n "{{ version.name }} "
          {% endfor %}
          echo ""

          # data
          for t in $(seq 0 {{ brick.ntests }}); do
            for v in $(seq 0 {{ brick.nversions }}); do
              dt=$(cat input/decodingTimes2/$v/$t)
              echo -n "$dt "
            done
            echo ""
          done
        } > output/results
      """
    }

    AggregateResults0: {
      input:  { decodingTimes2: $ForeachMoses0.output.decodingTimes }
      output: { results }

      ntests: $ntestsEach
      nversions: $mosesBinVersions.length - 1

      versions: $mosesBinVersions

      template: """
        {
          # header
          echo "version mean 2*std"

          {% for version in brick.versions %}
            # header
            echo -n "{{ version.name }} "
            # data
            cat input/decodingTimes2/{{ loop.index0 }}/* | python -c 'if __name__ == "__main__":
              import sys
              import numpy as np
              l=[float(f.strip()) for f in sys.stdin]
              print("%.1lf %.1lf" % (np.mean(l), np.std(l)*2.0))
            '
          {% endfor %}
          echo ""
        } > output/results
      """
    }

    # pushd 0/Experiment/AggregateResults0/; bash brick.do; popd; cat 0/Experiment/AggregateResults0/output/results
  }
}
