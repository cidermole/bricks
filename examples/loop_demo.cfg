# include general Bricks that we will later use below.
Bricks: @<Bricks.cfg>

# Creates the word alignment of a truecased corpus.
# for now also tests PhraseTable.
Experiment: {
  # inherit machine-specific paths, ncpus, ...
  # implicitly resolved to $Bricks.Setups.<hostname_or_setup_arg>
  extends: $Setup

  input:  {
    truecasedSrc: $ibm10k_truecased + $sourceLang
    truecasedTrg: $ibm10k_truecased + $targetLang
  }
  output: {
    processedItems: $parts.LoopyBrick.output.processedItems
  }
  
  # language pair
  sourceLang: en
  targetLang: it

  ibm10k_data: "/home/david/mmt/data/training/small/ibm"
  ibm10k_truecased: $ibm10k_data + "/train.clean."
  
  parts: {

    # The farthest example of stretching config semantics: describing a series of
    # Bricks, each with a different loop counter $i, to encode experiments with replicated
    # steps, e.g. tune 10 times, grid search over parameter(s), ...
    #
    LoopyBrick: {
      input:  { corpora: [ $_._.input.truecasedSrc, $_._.input.truecasedTrg ] }
      # new, special output list syntax:
      output: { processedItems: [ $parts[$i].output.processed ] }

      # define loop range
      i: [0..$input.corpora.length-1]

      # new, special semantics (parts is a list with one idiomatic entry):
      parts: [{
        # implicit scalar $i

        #extends: $Bricks.blabla
        input: { crp: $_._.input.corpora[$i] }
        output: { processed }
      }]
    }
  }
}
