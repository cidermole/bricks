# GIZA++ word alignment
# =====================
#
# The Brick you want to use is WordAligner.
#
# For now, don't reinvent the wheel -> just wrap train-model.perl
#
# original steps (from train-model.perl):
# *) [reduce_factors]
# *) make_classes
# *) get_vocabulary
# *) numberize_txt_file
# *) [make_dicts_files]
# *) run_single_giza x2
#    *) run_single_snt2cooc -> merge_cooc_files
#


# Takes two sides of a tokenized corpus in the intended casing, and
# produces a word alignment file (text file with "0-0 1-1 ...").
WordAligner: {
  input:  { src, trg }
  output: { alignment: $parts.GizaSymmetrize.output.alignment }

  # see http://www.statmt.org/moses/?n=FactoredTraining.AlignWords
  symmetrizationHeuristic: "grow-diag-final-and"

  parts: {
    # common preparation steps for both directions (including mkcls)
    GizaPrepare: {
      extends: $GizaAlign
      input:  { src: $_._.input.src, trg: $_._.input.trg }
      output: { preparedCorpusDir }

      templateFile: "Giza/GizaPrepare.do.jinja"
    }

    # forward GIZA++
    Giza12: {
      extends: $GizaAlign
      input: {
        side1: $_._.input.src
        side2: $_._.input.trg
        preparedCorpusDir: $GizaPrepare.output.preparedCorpusDir
      }

      direction: 2
    }

    # backward GIZA++
    Giza21: {
      extends: $GizaAlign
      input: {
        side1: $_._.input.trg
        side2: $_._.input.src
        preparedCorpusDir: $GizaPrepare.output.preparedCorpusDir
      }

      direction: 1
    }

    # Combines forward and backward alignments using a symmetrizationHeuristic.
    GizaSymmetrize: {
      extends: $GizaAlign
      input: {
        alignment12: $Giza12.output.alignment
        alignment21: $Giza21.output.alignment
        gizaDir12: $Giza12.output.gizaDir
        gizaDir21: $Giza21.output.gizaDir
      }

      # from WordAligner
      symmetrizationHeuristic: $_.symmetrizationHeuristic

      templateFile: "Giza/GizaSymmetrize.do.jinja"
    }
  }
}

# Primitive wrapper of train-model.perl for calling word alignment.
GizaAlign: {
  input:  { side1, side2 }
  output: { alignment, gizaDir }

  # paths for train-model.perl used in scripts
  MOSES: "/home/david/mmt/mmt-src-nosync/mosesdecoder"
  EXTERNAL_BIN_DIR: "/home/david/mmt/software/mgiza/mgizapp/bin"

  # from Experiment: language pair
  # NOT necessarily the source -> target direction for this Giza.
  sourceLang: $_.sourceLang
  targetLang: $_.targetLang

  # from Experiment: use half the Experiment's CPUs (two directions)
  gizaCpus: $_.ncpus / 2

  # 2: forward, 1: backward (for train-model.perl)
  direction

  templateFile: "Giza/GizaAlign.do.jinja"
}
