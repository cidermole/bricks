# GIZA++ word alignment
# =====================
#
# The Brick you want to inherit from is WordAligner.
#
# For now, don't reinvent the wheel -> just wrap train-model.perl
#
# original steps (from train-model.perl):
# *) [reduce_factors]
# *) make_classes
# *) get_vocabulary
# *) numberize_txt_file
# *) [make_dicts_files]
# *) run_single_giza x2
#    *) run_single_snt2cooc -> merge_cooc_files
#

#Giza: {
  WordAligner: {
    input:  { src, trg }
    output: { alignment: $parts.Symmetrizer0.output.alignment }

    # see http://www.statmt.org/moses/?n=FactoredTraining.AlignWords
    symmetrizationHeuristic: "grow-diag-final-and"

    parts: {
      # common preparation steps for both directions (including mkcls)
      GizaPrepare: {
        extends: $GizaAlign
        input:  { src: $_._.input.src, trg: $_._.input.trg }
        output: { preparedCorpusDir }

        templateFile: "Giza/GizaPrepare.do.jinja"
      }

      # forward GIZA++
      Giza12: {
        extends: $GizaAlign
        input: {
          side1: $_._.input.src
          side2: $_._.input.trg
          preparedCorpusDir: $GizaPrepare.output.preparedCorpusDir
        }

        direction: 2
      }

      # backward GIZA++
      Giza21: {
        extends: $GizaAlign
        input: {
          side1: $_._.input.trg
          side2: $_._.input.src
          preparedCorpusDir: $GizaPrepare.output.preparedCorpusDir
        }

        direction: 1
      }

      Symmetrizer0: {
        extends: $GizaAlign
        input: {
          alignment12: $Giza12.output.alignment
          alignment21: $Giza21.output.alignment
          gizaDir12: $Giza12.output.gizaDir
          gizaDir21: $Giza21.output.gizaDir
        }

        # from WordAligner
        symmetrizationHeuristic: $_.symmetrizationHeuristic

        templateFile: "Giza/GizaSymmetrize.do.jinja"
      }
    }
  }

  GizaAlign: {
    input:  { side1, side2 }
    output: { alignment, gizaDir }

    # we may either specify a shell command template directly (Jinja expanded) ...
    #template: "[ -e input/side1 -a -e input/side2 ] && touch output/alignment"

    # ... or we could specify a whole Jinja template file
    #templateFile: "giza.do.jinja"

    # paths for train-model.perl used inside.
    MOSES: "/home/david/mmt/mmt-src-nosync/mosesdecoder"
    EXTERNAL_BIN_DIR: "/home/david/mmt/software/mgiza/mgizapp/bin"

    # from Experiment: language pair
    # NOT necessarily the source -> target direction for this Giza.
    sourceLang: $_.sourceLang
    targetLang: $_.targetLang

    # from Experiment: use half the Experiment's CPUs (two directions)
    gizaCpus: $_.ncpus / 2

    # 2: forward, 1: backward (for train-model.perl)
    direction

    templateFile: "Giza/GizaAlign.do.jinja"
  }

  Symmetrizer: {
    input:  { alignment12, alignment21 }
    output: { alignment }
  }

#}