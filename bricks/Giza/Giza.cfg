# GIZA++ word alignment
# =====================
#
# The Brick you want to use is WordAligner.
#
# For now, don't reinvent the wheel -> just wrap train-model.perl


# WordAligner
# -----------
# Takes two sides of a tokenized corpus in the intended casing, and
# produces a word alignment file (text file with "0-0 1-1 ...").
#
WordAligner: {
  input:  { src, trg }
  output: { alignment: $parts.GizaSymmetrize.output.alignment }

  # see http://www.statmt.org/moses/?n=FactoredTraining.AlignWords
  symmetrizationHeuristic: "grow-diag-final-and"

  # DEFAULT: use GIZA default option in train-model.perl
  # 1: only use IBM Model 1
  # from Experiment: can potentially speed up testing alignment
  finalAlignmentModel: $_.FINAL_ALIGNMENT_MODEL

  # directory to cache word alignments in (to avoid useless recomputation)
  cacheDir

  parts: {
    # common preparation steps for both directions (including mkcls)
    GizaPrepare: {
      extends: $GizaAlign
      input:  { src: $_._.input.src, trg: $_._.input.trg }
      output: { preparedCorpusDir }

      templateFile: "Giza/GizaPrepare.do.jinja"

      # from WordAligner
      finalAlignmentModel: $_.finalAlignmentModel
    }

    # forward GIZA++
    Giza12: {
      extends: $GizaAlign
      input: {
        side1: $_._.input.src
        side2: $_._.input.trg
        preparedCorpusDir: $GizaPrepare.output.preparedCorpusDir
      }

      direction: 2

      # from WordAligner
      finalAlignmentModel: $_.finalAlignmentModel
    }

    # backward GIZA++
    Giza21: {
      extends: $GizaAlign
      input: {
        side1: $_._.input.trg
        side2: $_._.input.src
        preparedCorpusDir: $GizaPrepare.output.preparedCorpusDir
      }

      direction: 1

      # from WordAligner
      finalAlignmentModel: $_.finalAlignmentModel
    }

    # Combines forward and backward alignments using a symmetrizationHeuristic.
    GizaSymmetrize: {
      extends: $GizaAlign
      input: {
        alignment12: $Giza12.output.alignment
        alignment21: $Giza21.output.alignment
        gizaDir12: $Giza12.output.gizaDir
        gizaDir21: $Giza21.output.gizaDir
      }

      # from WordAligner
      symmetrizationHeuristic: $_.symmetrizationHeuristic
      finalAlignmentModel: $_.finalAlignmentModel

      templateFile: "Giza/GizaSymmetrize.do.jinja"
    }
  }

  templateFile: "Giza/WordAligner.do.jinja"
}




# Jointly align several bitext corpora, i.e. concatenate and word-align them together.
JointWordAligner: {
  input:  { sources: [], targets: [] }

  # NOTE: user has to define output list with the correct length.
  # output: { alignments: $parts.Split0.output.texts, jointAlignments: $parts.WordAligner0.output.alignment }
  output: { alignments: [], jointAlignments: $parts.WordAligner0.output.alignment }

  # directory to cache word alignments in (to avoid useless recomputation)
  # from Experiment
  cacheDir: $_.WORD_ALIGNMENT_CACHE_DIR

  parts: {
    BitextConcat0: {
      extends: $Bricks.Corpus.BitextConcat
      input:  { sources: $_._.input.sources, targets: $_._.input.targets }
      # output: { src, trg }
    }

    WordAligner0: {
      extends: $WordAligner
      input:  { src: $BitextConcat0.output.src, trg: $BitextConcat0.output.trg }
      # output: { alignment }

      # directory to cache word alignments in (to avoid useless recomputation)
      # from JointWordAligner
      cacheDir: $_.cacheDir
    }

    Split0: {
      extends: $Bricks.Corpus.Split
      input:  {
        text: $WordAligner0.output.alignment
        sources: $_._.input.sources
      }
      # an output reference in the reverse order than is usual. (part of workaround)
      # hope this works.
      output: { texts: $_._.output.alignments }
    }
  }
}


# Jointly align several bitext corpora, i.e. concatenate and word-align them together.
# Then, split the alignment and output the limited word alignment parts.
LimitJointWordAligner: {
  extends: $JointWordAligner

  input:  { sources: [], targets: [] }

  # NOTE: user has to define output list with the correct length.
  # output: { alignments: $parts.Split0.output.texts }
  output: { alignments: [] }

  # must have same length as sources, targets
  # e.g. nlinesLimit: [ALL, 10000]
  nlinesLimit: []

  parts: {
    # inherit all parts, except for the override below.
    extends: $JointWordAligner.parts

    # overrides $JointWordAligner.parts.Split0
    Split0: {
      input:  {
        text: $WordAligner0.output.alignment
        sources: $_._.input.sources
      }
      # an output reference in the reverse order than is usual. (part of workaround)
      # hope this works.
      output: { texts: $_._.output.alignments }

      # from LimitJointWordAligner
      nlinesLimit: $_._.nlinesLimit

      # this is not terribly efficient, since it reads from the start for every file part.
      # can be rewritten e.g. in Python if necessary.
      template: """
        iline=1
        {% for source in brick.input.sources %}
          l=$(cat input/sources/{{ loop.index0 }} | wc -l)
          tline=$(expr $iline + $l)
          rm -f output/texts/{{ loop.index0 }}  # remove back-symlink and replace it with a file (part of workaround)
          awk "NR >= $iline && NR < $tline" input/text > output/texts/{{ loop.index0 }}.all

          {% if brick.nlinesLimit[loop.index0] is number %}
            # line-count limit
            head -n {{ brick.nlinesLimit[loop.index0] }} output/texts/{{ loop.index0 }}.all > output/texts/{{ loop.index0 }}
            rm -f output/texts/{{ loop.index0 }}.all
          {% else %}
            # use all lines
            mv output/texts/{{ loop.index0 }}.all output/texts/{{ loop.index0 }}
          {% endif %}

          iline=$tline
        {% endfor %}
      """
    }
  }
}

# Individually align several bitext corpora, i.e. word-align each separately.
IndividualWordAligner: {
  input:  { sources: [], targets: [] }
  output: { alignments: [ $parts[$i].output.alignment ] }

  # define loop range
  i: [0..$input.sources.length-1]

  parts: [{
    # implicit scalar $i
    extends: $WordAligner
    input: { src: $_._.input.sources[$i], trg: $_._.input.targets[$i] }
    # output: { alignment }
  }]
}

# Primitive wrapper of train-model.perl for calling word alignment.
GizaAlign: {
  input:  { side1, side2 }
  output: { alignment, gizaDir }

  # from Experiment: paths for train-model.perl used in scripts
  MOSES: $_.MOSES
  EXTERNAL_BIN_DIR: $_.EXTERNAL_BIN_DIR

  # from Experiment: language pair
  # NOT necessarily the source -> target direction for this Giza.
  sourceLang: $_.sourceLang
  targetLang: $_.targetLang

  # from Experiment: use half the Experiment's CPUs (two directions)
  gizaCpus: $N_CPUS / 2

  # 2: forward, 1: backward (for train-model.perl)
  direction

  # DEFAULT: use GIZA default option in train-model.perl
  finalAlignmentModel

  templateFile: "Giza/GizaAlign.do.jinja"
}

# original steps (from train-model.perl):
# *) [reduce_factors]
# *) make_classes
# *) get_vocabulary
# *) numberize_txt_file
# *) [make_dicts_files]
# *) run_single_giza x2
#    *) run_single_snt2cooc -> merge_cooc_files
#
