# Corpus text file manipulation
# =============================
# Cutting, shuffling and concatenating text.


# Limiter
# =======
# Outputs a certain amount of lines (sentences).
# input/output interface common to Head and Shuffle.
#
Limiter: {
  input:  { textFile }
  output: { head }

  # override to get leading nlines lines
  nlines
}

Head: {
  extends: $Limiter

  template: """
    {% if brick.nlines is number %}
      head -n {{ brick.nlines }} input/textFile > output/head
    {% else %}
      # use all lines
      cp input/textFile output/head
    {% endif %}
  """
}

Shuffle: {
  extends: $Limiter

  # deterministic random seed
  seed: 42

  template: """
    # deterministic random source for shuf
    # see https://www.gnu.org/software/coreutils/manual/html_node/Random-sources.html#Random-sources
    get_seeded_random() {
      seed="$1"
      openssl enc -aes-256-ctr -pass pass:"$seed" -nosalt </dev/zero 2>/dev/null
    }

    {% if brick.nlines is number %}
      shuf -n {{ brick.nlines }} --random-source=<(get_seeded_random {{ brick.seed }}) < input/textFile > output/shuffled
    {% else %}
      shuf --random-source=<(get_seeded_random {{ brick.seed }}) < input/textFile > output/shuffled
    {% endif %}
  """
}

# BitextHead
# ----------
# Outputs the leading nlines of a parallel training corpus.
#
# To use all available lines, nlines may be defined without a value
# (True) or as a self-explanatory string ALL.
#
BitextHead: {
  input:  { src, trg }
  output: {
    src: $parts.HeadSrc0.output.head
    trg: $parts.HeadTrg0.output.head
  }

  nlines: ALL

  parts: {
    HeadSrc0: {
      extends: $Head
      input: { textFile: $_._.input.src }
      nlines: $_.nlines
    }
    HeadTrg0: {
      extends: $Head
      input: { textFile: $_._.input.trg }
      nlines: $_.nlines
    }
  }
}

# Concat
# ------
# Concatenates several text corpora into one file.
#
Concat: {
  input:  { texts: [] }
  output: { concat }

  template: """
    cat{% for text in brick.input.texts %} {{ text }}{% endfor %} > output/concat
  """
}

# BitextConcat
# ------------
# Concatenates several parallel text corpora into one file.
#
BitextConcat: {
  input:  { sources: [], targets: [] }
  output: {
    src: $parts.ConcatSrc0.output.concat
    trg: $parts.ConcatTrg0.output.concat
  }

  parts: {
    ConcatSrc0: {
      extends: $Concat
      input:  { texts: $_._.input.sources }
    }
    ConcatTrg0: {
      extends: $Concat
      input:  { texts: $_._.input.targets }
    }
  }
}

# LineCounts
# ----------
# Outputs the length of each corpus on a separate line.
#
LineCounts: {
  input:  { texts: [] }
  output: { countFile }

  template: """
    wc -l{% for text in brick.input.texts %} {{ text }}{% endfor %} | awk '{print $1}' | head -n-1 > output/countFile
  """
}
