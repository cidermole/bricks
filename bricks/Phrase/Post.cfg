# Post-processing steps on phrase tables
# ======================================
# Filtering, binarization and similar post-processing steps.

# FilterTable
# -----------
# Given an input file (src), filters a phrase table or lexical reordering table
# so only the necessary phrases are retained.
#
FilterTable: {
  # table, filteredTable are gzipped
  input:  { table, src }
  output: { filteredTable }

  # from Experiment: path for used script
  bricksDir: $BRICKS

  template: """
    zcat input/table | {{ brick.bricksDir }}/scripts/filter-table.pl input/src | gzip -c > output/filteredTable
  """
}

# FilterTables
# ------------
# Filter phrase table and lexicalized reordering table given an input file (src).
#
FilterTables: {
  extends: $Bricks.Phrase.ProvidesPhraseTableConfig

  # table, filteredPhraseTable, filteredReorderingTable are gzipped
  input:  { phraseTable, reorderingTable, src }
  output: {
    filteredPhraseTable: $parts.FilterPhraseTable0.output.filteredTable
    filteredReorderingTable: $parts.FilterReorderingTable0.output.filteredTable
  }

  parts: {
    FilterPhraseTable0: {
      extends: $FilterTable
      # table, filteredTable are gzipped
      input:  { table: $_._.input.phraseTable, src: $_._.input.src }
      output: { filteredTable }
    }

    FilterReorderingTable0: {
      extends: $FilterTable
      # table, filteredTable are gzipped
      input:  { table: $_._.input.reorderingTable, src: $_._.input.src }
      output: { filteredTable }
    }
  }
}

# BinarizePhraseTable
# -------------------
# Convert a gzipped plaintext phrase table (as described on PhraseScorer)
# into moses binary phrase table format (for PhraseDictionaryOnDisk).
#
BinarizePhraseTable: {
  # phraseTable is gzipped
  input:  { phraseTable }
  output: { binaryPhraseTableDir, misc, source, targetColl, targetInd, vocab }

  # from Experiment: path for used script
  MOSES: $_.MOSES

  numPhraseFeatures: 4

  template: """
    zcat input/phraseTable | {{ brick.MOSES }}/bin/CreateOnDiskPt 1 1 {{ brick.numPhraseFeatures }} 100 2 /dev/stdin output/binaryPhraseTableDir

    # not currently used, but later useful to actually have all our outputs.
    ln -sf binaryPhraseTableDir/Misc.dat output/misc
    ln -sf binaryPhraseTableDir/Source.dat output/source
    ln -sf binaryPhraseTableDir/TargetColl.dat output/targetColl
    ln -sf binaryPhraseTableDir/TargetInd.dat output/targetInd
    ln -sf binaryPhraseTableDir/Vocab.dat output/vocab
  """
}

# BinarizeReorderingTable
# -----------------------
# Convert a gzipped plaintext reordering table (same format as phrase table)
# into moses binary reordering table format (for LexicalReordering).
#
BinarizeReorderingTable: {
  # reorderingTable is gzipped
  input:  { reorderingTable }
  output: { binaryReorderingTableDir, idx, srctree, tgtdata, voc0, voc1 }

  # from Experiment: path for used script
  MOSES: $_.MOSES

  template: """
    mkdir -p output/binaryReorderingTableDir
    zcat input/reorderingTable | {{ brick.MOSES }}/bin/processLexicalTable -in /dev/stdin -out output/binaryReorderingTableDir/reordering
    touch output/binaryReorderingTableDir/reordering  # make sure the prefix exists in filesystem

    # not currently used, but later useful to actually have all our outputs.
    ln -sf binaryReorderingTableDir/reordering.binlexr.idx output/idx
    ln -sf binaryReorderingTableDir/reordering.binlexr.srctree output/srctree
    ln -sf binaryReorderingTableDir/reordering.binlexr.tgtdata output/tgtdata
    ln -sf binaryReorderingTableDir/reordering.binlexr.voc0 output/voc0
    ln -sf binaryReorderingTableDir/reordering.binlexr.voc1 output/voc1
  """
}

# FilterBinarizeTables
# --------------------
# Filter phrase table and lexicalized reordering table given an input file (src).
# Then, binarize them.
#
FilterBinarizeTables: {
  extends: $Bricks.Phrase.ProvidesPhraseTableConfig

  # table, filteredPhraseTable, filteredReorderingTable are gzipped
  input:  { phraseTable, reorderingTable, src }
  output: {
    binaryPhraseTableDir: $parts.BinarizePhraseTable0.output.binaryPhraseTableDir
    binaryReorderingTableDir: $parts.BinarizeReorderingTable0.output.binaryReorderingTableDir
  }

  # you MUST override phraseTableConfig to correct dictionaryType: "PhraseDictionaryCompact"

  parts: {
    FilterTables0: {
      extends: $FilterTables

      # phraseTable, reorderingTable are gzipped
      input: {
        phraseTable: $_._.input.phraseTable
        reorderingTable: $_._.input.reorderingTable
        src: $_._.input.src
      }
      # output: { filteredPhraseTable, filteredReorderingTable }
    }

    BinarizePhraseTable0: {
      extends: $BinarizePhraseTable

      # from ProvidesPhraseTableConfig
      numPhraseFeatures: $phraseTableConfig.numPhraseFeatures

      input:  { phraseTable: $FilterTables0.output.filteredPhraseTable }
      # output: { binaryPhraseTableDir, misc, source, targetColl, targetInd, vocab }
    }

    BinarizeReorderingTable0: {
      extends: $BinarizeReorderingTable
      
      input:  { reorderingTable: $FilterTables0.output.filteredReorderingTable }
      # output: { binaryReorderingTableDir, idx, srctree, tgtdata, voc0, voc1 }
    }
  }
}

BinarizeCompactTables: {
  extends: $FilterBinarizeTables

  # overrides $Bricks.Phrase.PhraseTable
  dictionaryType: "PhraseDictionaryCompact"

  parts: {
    BinarizePhraseTable0: {
      extends: $CompactPhraseTable

      # from ProvidesPhraseTableConfig
      numPhraseFeatures: $phraseTableConfig.numPhraseFeatures

      input:  { phraseTable: $_._.input.phraseTable }
      # output: { binaryPhraseTableDir, misc, source, targetColl, targetInd, vocab }
    }

    BinarizeReorderingTable0: {
      extends: $CompactReorderingTable

      input:  { reorderingTable: $_._.input.reorderingTable }
      # output: { binaryReorderingTableDir, idx, srctree, tgtdata, voc0, voc1 }
    }
  }
}

CompactPhraseTable: {
  # phraseTable is gzipped
  input:  { phraseTable }
  output: { binaryPhraseTableDir }

  # from Experiment: path for used bin/...
  MOSES: $_.MOSES
  ncpus: $_.N_CPUS

  numPhraseFeatures: 4

  template: """
    mkdir -p output/binaryPhraseTableDir/
    ln -s phraseTable input/phraseTable.gz
    {{ brick.MOSES }}/bin/processPhraseTableMin -in input/phraseTable.gz -out output/binaryPhraseTableDir/phrase-table -nscores {{ brick.numPhraseFeatures }} -threads {{ brick.ncpus }}
  """
}


CompactReorderingTable: {
  # reorderingTable is gzipped
  input:  { reorderingTable }
  output: { binaryReorderingTableDir }

  # from Experiment: path for used bin/...
  MOSES: $_.MOSES
  ncpus: $_.N_CPUS

  template: """
    mkdir -p output/binaryReorderingTableDir/
    ln -s reorderingTable input/reorderingTable.gz
    {{ brick.MOSES }}/bin/processLexicalTableMin -in input/reorderingTable.gz -out output/binaryReorderingTableDir/reordering -threads {{ brick.ncpus }}
  """
}
