# Phrase and lexicalized reordering table estimation
# ==================================================
# Low-level stuff wrapping moses scripts. Since phrase table and lexicalized
# reordering table estimation are coupled so tightly in the scripts, I did
# not bother teasing them apart.
#
# If you need lexicalized reordering, use PhraseExtractor.
# If you do not need LR, copy these Bricks and disable LR on the scripts.

# PhraseExtractor
# ---------------
# Extracts phrases in both directions and lexical reordering
# from a word-aligned parallel corpus.
#
PhraseExtractor: {
  input:  { src, trg, alignment }
  # sortedPhrasesReordering also has f2e (f ||| e)
  # all of these are gzipped
  output: { sortedPhrases_f2e, sortedPhrases_e2f, sortedPhrasesReordering }

  # from Experiment: paths for extract-parallel.perl used in script
  MOSES: $_.MOSES
  ncpus: $N_CPUS

  maxPhraseLength: 5

  # see http://www.statmt.org/moses/?n=FactoredTraining.BuildReorderingModel
	type:   "wbe"            # word-based extraction
	orient: "mslr"           # monotone, swap, discontinuous-left, discontinuous-right

  reorderingType: $type + "-" + $orient

  # arguments 'orientation --model ...' tell the wrapped phrase-extract/extract-main.cpp to extract reordering info
  template: """
    {{ brick.MOSES }}/scripts/generic/extract-parallel.perl {{ brick.ncpus }} split \\
        "sort    " {{ brick.MOSES }}/bin/extract input/trg input/src input/alignment \\
        output/extract {{ brick.maxPhraseLength }} orientation --model \\
        {{ brick.reorderingType }} --GZOutput
    ln -sf extract.sorted.gz output/sortedPhrases_f2e
    ln -sf extract.inv.sorted.gz output/sortedPhrases_e2f
    ln -sf extract.o.sorted.gz output/sortedPhrasesReordering
  """
}

# PhraseScorer
# ------------
# Computes phrase table scores (probabilities)
#
# Produces a gzipped phraseTable with lines like these:
#
# in europa ||| in europe ||| 0.829007 0.207955 0.801493 0.492402 ||| 0-0 1-1 ||| 1 1 1 ||| |||
#
# src words ||| trg words ||| phi_e2f  lex_e2f  phi_f2e  lex_f2e  ||| alignment ||| counts ||| (sparse_scores) ||| (key_values)
#
# The numbers here are *probabilities*, i.e. normalized from [0,1].
#
# Four different phrase translation probabilities are computed:
#
#    1. inverse phrase translation probability φ(f|e)
#    2. inverse lexical weighting lex(f|e)
#    3. direct phrase translation probability φ(e|f)
#    4. direct lexical weighting lex(e|f)
#
# see http://www.statmt.org/moses/?n=FactoredTraining.ScorePhrases
#
# Who computes phi_e2f and phi_f2e? Not directly from either phraseTableHalf...!
#
PhraseScorer: {
  input:  { sortedPhrases_f2e, sortedPhrases_e2f, lexical_f2e, lexical_e2f }
  # phraseTable is gzipped
  output: { phraseTable: $parts.Consolidator0.output.phraseTable }

  # see Brick comment above for feature order
  numFeatures: 4

  parts: {
    ScorerFwd0: {
      extends: $PhraseScorerFwd
      input: {
        sortedPhrases_f2e: $_._.input.sortedPhrases_f2e
        lexical_f2e: $_._.input.lexical_f2e
      }
      # output: { phraseTableHalf_f2e, phraseTableHalfCoc_f2e }
    }
    ScorerBwd0: {
      extends: $PhraseScorerBwd
      input: {
        sortedPhrases_e2f: $_._.input.sortedPhrases_e2f
        lexical_e2f: $_._.input.lexical_e2f
      }
      # output: { phraseTableHalf_e2f }
    }
    Consolidator0: {
      extends: $PhraseTableConsolidator
      input: {
        phraseTableHalf_f2e: $ScorerFwd0.output.phraseTableHalf_f2e
        phraseTableHalf_e2f: $ScorerBwd0.output.phraseTableHalf_e2f
        phraseTableHalfCoc_f2e: $ScorerFwd0.output.phraseTableHalfCoc_f2e
      }
      # output: { phraseTable }
    }
  }
}

# PhraseScorerBwd
# ---------------
# Backward scoring of phrase pairs -- note: phi(f|e) is e2f.
# Also computes lexical scores for each phrase pair, using the precomputed
# word translation probabilities passed in.
#
PhraseScorerBwd: {
  input:  { sortedPhrases_e2f, lexical_e2f }
  # phraseTableHalf_e2f is gzipped
  output: { phraseTableHalf_e2f }

  # from Experiment: paths for score-parallel.perl used in script
  MOSES: $_.MOSES
  ncpus: $N_CPUS

  template: """
    # the script detects gzip magic by the .gz extension
    # need absolute path to phrase table, for some reason perl forks gzip in other cwd?
    ln -sf sortedPhrases_e2f input/sortedPhrases_e2f.gz
    {{ brick.MOSES }}/scripts/generic/score-parallel.perl {{ brick.ncpus }} \\
      "sort    " {{ brick.MOSES }}/bin/score $(pwd)/input/sortedPhrases_e2f.gz \\
      input/lexical_e2f output/phraseTableHalf_e2f --Inverse  1
  """
}

# PhraseScorerFwd
# ---------------
# Forward scoring of phrase pairs -- note: phi(e|f) is f2e.
# Also computes lexical scores for each phrase pair, using the precomputed
# word translation probabilities passed in.
#
PhraseScorerFwd: {
  input:  { sortedPhrases_f2e, lexical_f2e }
  # phraseTableHalf_f2e is gzipped
  output: { phraseTableHalf_f2e, phraseTableHalfCoc_f2e }

  # from Experiment: paths for score-parallel.perl used in script
  MOSES: $_.MOSES
  ncpus: $N_CPUS

  template: """
    # the script detects gzip magic by the .gz extension
    # need absolute path to phrase table, for some reason perl forks gzip in other cwd?
    ln -sf sortedPhrases_f2e input/sortedPhrases_f2e.gz
    {{ brick.MOSES }}/scripts/generic/score-parallel.perl {{ brick.ncpus }} \\
      "sort    " {{ brick.MOSES }}/bin/score $(pwd)/input/sortedPhrases_f2e.gz \\
      input/lexical_f2e output/phraseTableHalf_f2e --GoodTuring  0
    # .coc file for GoodTuring smoothing
    ln -sf phraseTableHalf_f2e.coc output/phraseTableHalfCoc_f2e
  """
}

# PhraseTableConsolidator
# -----------------------
# Appends the scores from two halves of the phrase table computed above
# (forward and backward scores).
#
PhraseTableConsolidator: {
  # .coc file for GoodTuring smoothing
  input:  { phraseTableHalf_f2e, phraseTableHalf_e2f, phraseTableHalfCoc_f2e }
  # phraseTable is gzipped
  output: { phraseTable }

  # from Experiment: paths for bin/consolidate used in script
  MOSES: $_.MOSES

  template: """
    # the program detects gzip magic by the .gz extension
    ln -sf phraseTableHalf_f2e input/phraseTableHalf_f2e.gz
    ln -sf phraseTableHalf_e2f input/phraseTableHalf_e2f.gz
    {{ brick.MOSES }}/bin/consolidate input/phraseTableHalf_f2e.gz input/phraseTableHalf_e2f.gz \\
      /dev/stdout --MinScore 2:0.0001 --GoodTuring input/phraseTableHalfCoc_f2e \\
      | gzip -c > output/phraseTable
  """
}

# LexicalReorderingScorer
# -----------------------
# Computes scores for lexicalized reordering model. Produces a gzipped text file
# in phrase-table format.
#
LexicalReorderingScorer: {
  input:  { sortedPhrasesReordering }
  # reorderingTable is gzipped
  output: { reorderingTable }

  # from Experiment: paths for bin/consolidate used in script
  MOSES: $_.MOSES

  smoothingValue: 0.5

  # thank the people who documented this abomination of config passing in train-model.perl
  #
  # * $mtype will be one of wbe, phrase, or hier
  # * the value stored in $REORDERING_MODEL_TYPES{$mtype} is a concatenation of the "orient"
  #   attributes such as "msd"
  # * the "filename" attribute is appended to the filename, but actually serves as the main configuration specification
  #   for reordering scoring. it holds a string such as "wbe-msd-didirectional-fe"
  #   which has the more general format type-orient-dir-lang
	#	$cmd .= " --model \"$mtype $REORDERING_MODEL_TYPES{$mtype}";
	#
	# e.g. --model "wbe mslr wbe-mslr-bidirectional-fe"

	# see http://www.statmt.org/moses/?n=FactoredTraining.BuildReorderingModel
	type:   "wbe"            # word-based extraction
	orient: "mslr"           # monotone, swap, discontinuous-left, discontinuous-right
	dir:    "bidirectional"  # use both backward and forward models
	lang:   "fe"             # conditioned on both the source and target languages

  # NOTE: you are also responsible for adapting numFeatures below.
  # this could be implemented in a small Python class. use `` from config package.

  # bidirectional: *2, each orientation: *4 feature scores
  numFeatures: 2 * 4

  # collapsing doesn't seem to be implemented anywhere, neither in EMS scripts nor in phrase-extract/lexical-reordering/score.cpp

  reorderingConfigSpec: $type + "-" + $orient + "-" + $dir + "-" + $lang

  template: """
    {{ brick.MOSES }}/bin/lexical-reordering-score input/sortedPhrasesReordering \\
      {{ brick.smoothingValue }} output/reorderingTable. --model \\
      "{{ brick.type }} {{ brick.orient }} {{ brick.reorderingConfigSpec }}"
    ln -sf reorderingTable.{{ brick.reorderingConfigSpec }}.gz output/reorderingTable
  """
}
