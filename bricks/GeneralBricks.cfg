#GeneralBricks: {
  #extends: {}
  
  # we did not put these Bricks into parts:, because ...
  # * GeneralBricks is not meant to be used as one single Brick
  # * it is awkward to write $GeneralBricks.parts.BrickName
  
  # Sentence-aligned parallel corpus.
  # This is for demo only. No real use, as it does not do any work.
  ParallelCorpus: {
    # extends: ...
    # untokenized, sentence aligned files $raw.$inputExtension, $raw.$outputExtension
    input:  { rawCorpusPrefix }
    output: { src, trg }
  }
  
  # Tokenizer
  Tokenizer: {
    input:  { raw }
    output: { tokenized }
  }
  
  # Truecaser
  Truecaser: {
    input:  { tokenized }
    output: { truecased }
  }
  
  # Preprocessor for raw corpus data, one sentence per line.
  CorpusSidePreprocessor: {
    input:  { raw }
    #output: { truecased }
    output: { truecased: $parts.Truecaser0.output.truecased }
    
    parts: {
      # The names here will be inherited if a final experiment config
      # uses Bricks extending the CorpusSidePreprocessor.
      Tokenizer0: {
        extends: $Tokenizer
        
        # Since we should not refer to CorpusSidePreprocessor but to the final instance,
        # which is not known here yet, we must use relative paths.
        #
        # $_.key refers (explicitly) to a parent container's key.
        # Usually, container ancestors are walked to resolve such references implicitly
        # at the closest possible ancestor.
        # In this case, however, we want to avoid referring to ourselves.
        #
        input:   { raw: $_._.input.raw }
      }
      
      Truecaser0: {
        extends: $Truecaser
        input:   { tokenized: $Tokenizer0.output.tokenized }
      }
    }
  }

  # GIZA++ word alignment
  #
  # original steps (from train-model.perl):
  # *) [reduce_factors]
  # *) make_classes
  # *) get_vocabulary
  # *) numberize_txt_file
  # *) [make_dicts_files]
  # *) run_single_giza x2
  #    *) run_single_snt2cooc -> merge_cooc_files
  #
  # for now, don't reinvent the wheel.

  Giza: {
    input:  { side1, side2 }
    output: { alignment, gizaDir }
    
    # we may either specify a shell command template directly (Jinja expanded) ...
    #template: "[ -e input/side1 -a -e input/side2 ] && touch output/alignment"
    
    # ... or we could specify a whole Jinja template file
    #templateFile: "giza.do.jinja"

    # paths for train-model.perl used inside.
    MOSES: "/home/david/mmt/mmt-src-nosync/mosesdecoder"
    EXTERNAL_BIN_DIR: "/home/david/mmt/software/mgiza/mgizapp/bin"

    # from Experiment: language pair
    # NOT necessarily the source -> target direction for this Giza.
    sourceLang: $_.sourceLang
    targetLang: $_.targetLang

    # from Experiment: use half the Experiment's CPUs (two directions)
    gizaCpus: $_.ncpus / 2

    # 2: forward, 1: backward (for train-model.perl)
    direction

    templateFile: "Giza.do.jinja"
  }
  
  Symmetrizer: {
    input:  { alignment12, alignment21 }
    output: { alignment }
  }
  
  WordAligner: {
    input:  { src, trg }
    output: { alignment: $parts.Symmetrizer0.output.alignment }

    # see http://www.statmt.org/moses/?n=FactoredTraining.AlignWords
    symmetrizationHeuristic: "grow-diag-final-and"

    parts: {
      # common preparation steps for both directions (including mkcls)
      GizaPrepare: {
        extends: $Giza
        input:  { src: $_._.input.src, trg: $_._.input.trg }
        output: { preparedCorpusDir }

        templateFile: "GizaPrepare.do.jinja"
      }

      # forward GIZA++
      Giza12: {
        extends: $Giza
        input: {
          side1: $_._.input.src
          side2: $_._.input.trg
          preparedCorpusDir: $GizaPrepare.output.preparedCorpusDir
        }

        direction: 2
      }

      # backward GIZA++
      Giza21: {
        extends: $Giza
        input: {
          side1: $_._.input.trg
          side2: $_._.input.src
          preparedCorpusDir: $GizaPrepare.output.preparedCorpusDir
        }

        direction: 1
      }
      
      Symmetrizer0: {
        extends: $Giza
        input: {
          alignment12: $Giza12.output.alignment
          alignment21: $Giza21.output.alignment
          gizaDir12: $Giza12.output.gizaDir
          gizaDir21: $Giza21.output.gizaDir
        }

        # from WordAligner
        symmetrizationHeuristic: $_.symmetrizationHeuristic

        templateFile: "GizaSymmetrize.do.jinja"
      }
    }
  }
#}