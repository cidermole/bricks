# General-purpose Bricks
# ======================
#
# You can freely extend these Bricks for your experiments.
#
# The Bricks here should be general enough for usage across multiple
# different experimental setups.
#
# Create sensible groupings and include them here, e.g. Giza: @<Giza/Giza.cfg>


# GIZA++ word aligner
Giza: @<Giza/Giza.cfg>

# Phrase-based translation models
Phrase: @<Phrase/Phrase.cfg>

# Language model estimation
LM: @<LM/LM.cfg>

# Moses decoder, configuration and tuning
Moses: @<Moses/Moses.cfg>

# Evaluation of MT output
Eval: @<Eval/Eval.cfg>

# input/output interface common to Head and Shuffle
Limiter: {
  input:  { textFile }
  output: { head }

  # override to get leading nlines lines
  nlines
}

Head: {
  extends: $Limiter

  template: """
    {% if brick.nlines is number %}
      head -n {{ brick.nlines }} input/textFile > output/head
    {% else %}
      # use all lines
      cp input/textFile output/head
    {% endif %}
  """
}

Shuffle: {
  extends: $Limiter

  # deterministic random seed
  seed: 42

  template: """
    # deterministic random source for shuf
    # see https://www.gnu.org/software/coreutils/manual/html_node/Random-sources.html#Random-sources
    get_seeded_random() {
      seed="$1"
      openssl enc -aes-256-ctr -pass pass:"$seed" -nosalt </dev/zero 2>/dev/null
    }

    {% if brick.nlines is number %}
      shuf -n {{ brick.nlines }} --random-source=<(get_seeded_random {{ brick.seed }}) < input/textFile > output/shuffled
    {% else %}
      shuf --random-source=<(get_seeded_random {{ brick.seed }}) < input/textFile > output/shuffled
    {% endif %}
  """
}

# LimitTrainingData
# -----------------
# Outputs the leading nlines of a parallel training corpus.
#
# To use all available lines, nlines may be defined without a value
# (True) or as a self-explanatory string ALL.
#
LimitTrainingData: {
  input:  { src, trg }
  output: {
    src: $parts.HeadSrc0.output.head
    trg: $parts.HeadTrg0.output.head
  }

  nlines: ALL

  parts: {
    HeadSrc0: {
      extends: $Head
      input: { textFile: $_._.input.src }
      nlines: $_.nlines
    }
    HeadTrg0: {
      extends: $Head
      input: { textFile: $_._.input.trg }
      nlines: $_.nlines
    }
  }
}

# Summary
# -------
# write a human-readable summary of the experiment and its results.
#
Summary: {
  # a list of text files to be output together after the experiment description.
  input:  { results: [] }
  output: { summary }

  # from Experiment
  description: $DESCRIPTION

  template: """
    echo "{{ brick.description }}" | sed -e 's/^[ \t]*//' > output/summary
    echo "" >> output/summary

    {% for result in brick.input.results %}
      res=$(readlink -f {{ result }})
      echo "$res results:" >> output/summary
      echo "##################################################" >> output/summary
      cat {{ result }} >> output/summary
      echo "##################################################" >> output/summary
      echo "" >> output/summary
    {% endfor %}
  """
}
