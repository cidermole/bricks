# Moses decoder, configuration and tuning
# =======================================
# Create moses.ini, do MERT tuning, run moses decoder...

# MosesIni
# --------
# Generator for moses.ini file.
#
# Requires the following keys on each of the inputs:
#
# phraseTable.numPhraseFeatures
# reoderingTable.reorderingConfigSpec
# reorderingTable.numReorderingFeatures
#
MosesIni: {
  # each of these inputs is a Sequence.
  input:  { languageModels, phraseTables, binaryPhraseTables, reorderingTables, binaryReorderingTables }
  output: { mosesIni }

  templateFile: "Moses/moses.ini.jinja"
}

# WeightedMosesIni
# ----------------
# Combines a generated moses.ini with weights from a tuned moses.ini
#
WeightedMosesIni: {
  input:  { generatedMosesIni, tunedMosesIni }
  output: { weightedMosesIni }

  # from Experiment: path for used script
  moses: $MOSES

  template: """
    {{ brick.moses }}/scripts/ems/support/substitute-weights.perl input/generatedMosesIni input/tunedMosesIni output/weightedMosesIni
  """
}

# PhraseBasedIniFromModelFiles
# ----------------------------
# Instant moses.ini with single model files and weights from a tuned moses.ini
# No lexicalized reordering.
#
PhraseBasedIniFromModelFiles: {
  input:  { languageModelFile, phraseTableFile, tunedMosesIni }
  output: { weightedMosesIni: $parts.WeightedMosesIni0.output.weightedMosesIni }

  parts: {
    LM0: {
      extends: $Bricks.LM.File

      input:  { languageModel: $_._.input.languageModelFile }
      # output: { languageModel }
    }

    TM0: {
      extends: $Bricks.Phrase.File
      input:  { phraseTable: $_._.input.phraseTableFile }
      # output: { phraseTable }
    }

    MosesIni0: {
      extends: $MosesIni
      input: {
        languageModels: [ $LM0.output.languageModel ]
        phraseTables: [ $TM0.output.phraseTable ]
        binaryPhraseTables: []
        reorderingTables: []
        binaryReorderingTables: []
      }
      # output: { mosesIni }
    }

    WeightedMosesIni0: {
      extends: $WeightedMosesIni
      input: {
        generatedMosesIni: $MosesIni0.output.mosesIni
        tunedMosesIni: $_._.input.tunedMosesIni
      }
      # output: { weightedMosesIni }
    }
  }
}

# Mert
# ----
# Minimum error rate training, a tuning method (Och 2003).
#
Mert: {
  input:  { mosesIni, devSrc, devRef }
  output: { tunedMosesIni }

  # from Experiment: path for used script
  moses: $MOSES
  ncpus: $N_CPUS

  #decoderFlags: "-threads " + $N_CPUS + " -search-algorithm 1 -cube-pruning-pop-limit 1000 -s 5000 -v 0 "
  # TypeError: cannot concatenate 'str' and 'int' objects

  # --use-config-weights-for-first-run

  useConfigWeights: False
  #randomRestarts: 20
  # from Experiment
  randomRestarts: $MERT_RANDOM_RESTARTS

  mosesBin: $moses + "/bin/moses"

  template: """
    # clean the working dir
    rm -rf mert-work
    {{ brick.moses }}/scripts/training/mert-moses.pl input/devSrc input/devRef {{ brick.mosesBin }} \\
      input/mosesIni --nbest 100 --working-dir $(pwd)/mert-work \\
      --decoder-flags "-threads {{ brick.ncpus }} -search-algorithm 1 -cube-pruning-pop-limit 1000 -s 5000 -v 0 " \\
      --rootdir {{ brick.moses }}/scripts -mertdir {{ brick.moses }}/bin --no-filter-phrase-table \\
      {% if brick.useConfigWeights %}--use-config-weights-for-first-run{% endif %} \\
      --random-restarts {{ brick.randomRestarts }}
    cp mert-work/moses.ini output/tunedMosesIni
  """
}

CustomMert: {
  extends: $Mert
  input:  { mosesIni, devSrc, devRef, mosesBin }
  # output: { tunedMosesIni }

  mosesBin: "input/mosesBin"
}

# Decoder
# -------
# Moses decoder from the default location.
#
Decoder: {
  input:  { mosesIni, src }
  output: { hyp }

  # from Experiment: path for moses decoder
  ncpus: $N_CPUS
  mosesBin: $MOSES + "/bin/moses"

  template: """
    {{ brick.mosesBin }} -threads {{ brick.ncpus }} -search-algorithm 1 \\
      -cube-pruning-pop-limit 1000 -s 5000 -v 1 -f input/mosesIni -i input/src > output/hyp
  """
}

# CustomDecoder
# -------------
# Moses decoder with arbitrary binary executable.
#
CustomDecoder: {
  input:  { mosesIni, src, mosesBin }
  output: { hyp }

  # from Experiment: config for moses decoder
  ncpus: $N_CPUS

  template: """
    input/mosesBin -threads {{ brick.ncpus }} -v 1 -f input/mosesIni -i input/src > output/hyp
  """
}

# CustomProfiledDecoder
# ---------------------
# Moses decoder with arbitrary binary executable that is profiled.
#
CustomProfiledDecoder: {
  extends: $CustomDecoder

  output: { hyp, decodingTime }

  template: """
    echo >&2 "Running moses decoder $(readlink -f input/mosesBin)..."
    input/mosesBin -threads {{ brick.ncpus }} -v 1 -f input/mosesIni -i input/src \\
      2>&1 1>output/hyp | tee output/out.stderr | awk '/Decoding took/ { print $3 }' \\
      > output/decodingTime
    echo >&2 "moses decoder done."
  """
}



# BuildMoses
# ----------
# Builds a moses decoder from sources.
#
BuildMoses: {
  input:  {}
  output: { mosesBin }

  # from Experiment: staging area path for build-moses.sh
  autoBuildDir: $AUTO_BUILD_DIR
  bricksDir: $BRICKS

  srcRepo:   "git@github.com:moses-smt/mosesdecoder.git"
  revision:  "HEAD"
  branch:    "master"
  buildType: "Release"
  target:    ""

  # from Experiment
  # can provide alternative GCC install folder here, e.g. "/opt/gcc-4.9.2"
  gccToolset: $GCC_TOOLSET

  # buildType: shorthand options like CMake: Release, Debug, RelWithDebInfo
  # target: only builds the requested binary itself. moses|moses2 only, or empty str.

  #  [-s source-repo.git] [-r revision] [-b branch] [-a auto-target-dir] [-t Release|Debug|RelWithDebInfo]
  templateFile: "Moses/BuildMoses.do.jinja"
}
