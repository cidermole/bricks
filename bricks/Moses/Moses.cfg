# Moses decoder configuration and tuning
# ======================================
# Create moses.ini, do MERT tuning, run moses decoder...

# MosesIni
# --------
# Generator for moses.ini file.
#
# Requires the following keys on each of the inputs:
#
# phraseTable.numPhraseFeatures
# reoderingTable.reorderingConfigSpec
# reorderingTable.numReorderingFeatures
#
MosesIni: {
  # each of these inputs is a Sequence.
  input:  { languageModels, phraseTables, binaryPhraseTables, reorderingTables, binaryReorderingTables }
  output: { mosesIni }

  templateFile: "Moses/moses.ini.jinja"
}

# WeightedMosesIni
# ----------------
# Combines a generated moses.ini with weights from a tuned moses.ini
#
WeightedMosesIni: {
  input:  { generatedMosesIni, tunedMosesIni }
  output: { weightedMosesIni }

  # from Experiment: path for used script
  MOSES: $_.MOSES

  template: """
    {{ brick.MOSES }}/scripts/ems/support/substitute-weights.perl input/generatedMosesIni input/tunedMosesIni output/weightedMosesIni
  """
}

# Mert
# ----
# Minimum error rate training, a tuning method (Och 2003).
#
Mert: {
  input:  { mosesIni, devSrc, devRef }
  output: { tunedMosesIni }

  # from Experiment: path for used script
  MOSES: $_.MOSES
  ncpus: $_.ncpus

  #decoderFlags: "-threads " + $_.ncpus + " -search-algorithm 1 -cube-pruning-pop-limit 1000 -s 5000 -v 0 "
  # TypeError: cannot concatenate 'str' and 'int' objects

  template: """
    # clean the working dir
    rm -rf mert-work
    {{ brick.MOSES }}/scripts/training/mert-moses.pl input/devSrc input/devRef {{ brick.MOSES }}/bin/moses \\
      input/mosesIni --nbest 100 --working-dir $(pwd)/mert-work \\
      --decoder-flags "-threads {{ brick.ncpus }} -search-algorithm 1 -cube-pruning-pop-limit 1000 -s 5000 -v 0 " \\
      --rootdir {{ brick.MOSES }}/scripts -mertdir {{ brick.MOSES }}/bin --no-filter-phrase-table
    cp mert-work/moses.ini output/tunedMosesIni
  """
}

# Decoder
# -------
# Moses decoder.
#
Decoder: {
  input:  { mosesIni, src }
  output: { hyp }

  # from Experiment: path for moses decoder
  MOSES: $_.MOSES
  ncpus: $_.ncpus

  template: """
    {{ brick.MOSES }}/bin/moses -threads {{ brick.ncpus }} -search-algorithm 1 \\
      -cube-pruning-pop-limit 1000 -s 5000 -v 1 -f input/mosesIni -i input/src > output/hyp
  """
}
