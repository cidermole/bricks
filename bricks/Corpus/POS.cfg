# Part-of-speech tagging
# ======================
# POS taggers for various languages.
#
#
# these functions output either TSV format:
#   we      PRP
#   went    VBD
#   .       .
#
#   we      PRP
#   ...
#
# or moses factored format:
#   we|PRP went|VBD .|.
#   we|PRP ...
#

# EnPosTsv
# --------
# English part-of-speech tagger. Uses Stanford POS tagger.
#
EnPosTsv: {
  input: { corpus }
  output: { corpusPosTsv }

  # from Experiment
  tools: $_.POS_TOOLS_DIR
  java: $_.JAVA_HOME

  template: """
    JAVA={{ brick.java }}/bin/java
    SPT={{ brick.tools }}/stanford-postagger

    # NOTE: "-textFile /dev/stdin" works around double newline after sents when reading from stdin
    # (version stanford-postagger-full-2015-04-20)
    cat input/corpus |
      $JAVA -mx300m -cp $SPT/stanford-postagger.jar edu.stanford.nlp.tagger.maxent.MaxentTagger -model \\
      $SPT/models/english-left3words-distsim.tagger -outputFormat tsv -sentenceDelimiter newline \\
      -tokenize false -textFile /dev/stdin > output/corpusPosTsv
  """
}

# ItPosTsv
# --------
# Italian part-of-speech tagger. Uses Apache OpenNLP POS tagger.
#
ItPosTsv: {
  input: { corpus }
  output: { corpusPosTsv }

  # from Experiment
  tools: $_.POS_TOOLS_DIR
  java: $_.JAVA_HOME

  template: """
    OPENNLP={{ brick.tools }}/apache-opennlp/bin/opennlp
    MODEL={{ brick.tools }}/opennlp-italian-models/models/it/it-pos-maxent.bin

    cat input/corpus |
      $OPENNLP POSTagger $MODEL | sed 's/ \?\([^ ][^ ]*\)_\([^ ][^ ]*\)/\1\t\2\n/g' > output/corpusPosTsv
  """
}

Factored2Tsv: {
  input:  { corpusPosFactored }
  output: { corpusPosTsv }

  template: """
    sed 's/ \?\([^ ][^ ]*\)|\([^ ][^ ]*\)/\1\t\2\n/g' input/corpusPosFactored > output/corpusPosTsv
  """
}

Tsv2Factored: {
  input:  { corpusPosTsv }
  output: { corpusPosFactored }

  template: """
    sed 's/\t/|/g' input/corpusPosTsv | tr '\n' ' ' | sed 's/  /\n/g' > output/corpusPosFactored
  """
}


EnPosFactored: {
  input: { corpus }
  output: { corpusPosFactored: $parts.Tsv2Factored0.output.corpusPosFactored }

  parts: {
    Tagger0: {
      extends: $EnPosTsv
      input: { corpus: $_._.input.corpus }
    }

    Tsv2Factored0: {
      extends: $Tsv2Factored
      input: { corpusPosTsv: $Tagger0.output.corpusPosTsv }
    }
  }
}


ItPosFactored: {
  input: { corpus }
  output: { corpusPosFactored: $parts.Tsv2Factored0.output.corpusPosFactored }

  parts: {
    Tagger0: {
      # TODO: could we configure this on-the-fly, referencing a key here which can then be set by the user?
      extends: $ItPosTsv
      input: { corpus: $_._.input.corpus }
    }

    Tsv2Factored0: {
      extends: $Tsv2Factored
      input: { corpusPosTsv: $Tagger0.output.corpusPosTsv }
    }
  }
}

# TODO: this all could be implemented nicer in one shellscript with options (for language, output format, ...).
